// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: debugd.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DebugdClient is the client API for Debugd service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DebugdClient interface {
	SetInfo(ctx context.Context, in *SetInfoRequest, opts ...grpc.CallOption) (*SetInfoResponse, error)
	GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error)
	UploadFiles(ctx context.Context, opts ...grpc.CallOption) (Debugd_UploadFilesClient, error)
	DownloadFiles(ctx context.Context, in *DownloadFilesRequest, opts ...grpc.CallOption) (Debugd_DownloadFilesClient, error)
	UploadSystemServiceUnits(ctx context.Context, in *UploadSystemdServiceUnitsRequest, opts ...grpc.CallOption) (*UploadSystemdServiceUnitsResponse, error)
}

type debugdClient struct {
	cc grpc.ClientConnInterface
}

func NewDebugdClient(cc grpc.ClientConnInterface) DebugdClient {
	return &debugdClient{cc}
}

func (c *debugdClient) SetInfo(ctx context.Context, in *SetInfoRequest, opts ...grpc.CallOption) (*SetInfoResponse, error) {
	out := new(SetInfoResponse)
	err := c.cc.Invoke(ctx, "/debugd.Debugd/SetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugdClient) GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error) {
	out := new(GetInfoResponse)
	err := c.cc.Invoke(ctx, "/debugd.Debugd/GetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugdClient) UploadFiles(ctx context.Context, opts ...grpc.CallOption) (Debugd_UploadFilesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Debugd_ServiceDesc.Streams[0], "/debugd.Debugd/UploadFiles", opts...)
	if err != nil {
		return nil, err
	}
	x := &debugdUploadFilesClient{stream}
	return x, nil
}

type Debugd_UploadFilesClient interface {
	Send(*FileTransferMessage) error
	CloseAndRecv() (*UploadFilesResponse, error)
	grpc.ClientStream
}

type debugdUploadFilesClient struct {
	grpc.ClientStream
}

func (x *debugdUploadFilesClient) Send(m *FileTransferMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *debugdUploadFilesClient) CloseAndRecv() (*UploadFilesResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadFilesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *debugdClient) DownloadFiles(ctx context.Context, in *DownloadFilesRequest, opts ...grpc.CallOption) (Debugd_DownloadFilesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Debugd_ServiceDesc.Streams[1], "/debugd.Debugd/DownloadFiles", opts...)
	if err != nil {
		return nil, err
	}
	x := &debugdDownloadFilesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Debugd_DownloadFilesClient interface {
	Recv() (*FileTransferMessage, error)
	grpc.ClientStream
}

type debugdDownloadFilesClient struct {
	grpc.ClientStream
}

func (x *debugdDownloadFilesClient) Recv() (*FileTransferMessage, error) {
	m := new(FileTransferMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *debugdClient) UploadSystemServiceUnits(ctx context.Context, in *UploadSystemdServiceUnitsRequest, opts ...grpc.CallOption) (*UploadSystemdServiceUnitsResponse, error) {
	out := new(UploadSystemdServiceUnitsResponse)
	err := c.cc.Invoke(ctx, "/debugd.Debugd/UploadSystemServiceUnits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DebugdServer is the server API for Debugd service.
// All implementations must embed UnimplementedDebugdServer
// for forward compatibility
type DebugdServer interface {
	SetInfo(context.Context, *SetInfoRequest) (*SetInfoResponse, error)
	GetInfo(context.Context, *GetInfoRequest) (*GetInfoResponse, error)
	UploadFiles(Debugd_UploadFilesServer) error
	DownloadFiles(*DownloadFilesRequest, Debugd_DownloadFilesServer) error
	UploadSystemServiceUnits(context.Context, *UploadSystemdServiceUnitsRequest) (*UploadSystemdServiceUnitsResponse, error)
	mustEmbedUnimplementedDebugdServer()
}

// UnimplementedDebugdServer must be embedded to have forward compatible implementations.
type UnimplementedDebugdServer struct {
}

func (UnimplementedDebugdServer) SetInfo(context.Context, *SetInfoRequest) (*SetInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetInfo not implemented")
}
func (UnimplementedDebugdServer) GetInfo(context.Context, *GetInfoRequest) (*GetInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedDebugdServer) UploadFiles(Debugd_UploadFilesServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFiles not implemented")
}
func (UnimplementedDebugdServer) DownloadFiles(*DownloadFilesRequest, Debugd_DownloadFilesServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadFiles not implemented")
}
func (UnimplementedDebugdServer) UploadSystemServiceUnits(context.Context, *UploadSystemdServiceUnitsRequest) (*UploadSystemdServiceUnitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadSystemServiceUnits not implemented")
}
func (UnimplementedDebugdServer) mustEmbedUnimplementedDebugdServer() {}

// UnsafeDebugdServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DebugdServer will
// result in compilation errors.
type UnsafeDebugdServer interface {
	mustEmbedUnimplementedDebugdServer()
}

func RegisterDebugdServer(s grpc.ServiceRegistrar, srv DebugdServer) {
	s.RegisterService(&Debugd_ServiceDesc, srv)
}

func _Debugd_SetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugdServer).SetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debugd.Debugd/SetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugdServer).SetInfo(ctx, req.(*SetInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debugd_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugdServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debugd.Debugd/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugdServer).GetInfo(ctx, req.(*GetInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debugd_UploadFiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DebugdServer).UploadFiles(&debugdUploadFilesServer{stream})
}

type Debugd_UploadFilesServer interface {
	SendAndClose(*UploadFilesResponse) error
	Recv() (*FileTransferMessage, error)
	grpc.ServerStream
}

type debugdUploadFilesServer struct {
	grpc.ServerStream
}

func (x *debugdUploadFilesServer) SendAndClose(m *UploadFilesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *debugdUploadFilesServer) Recv() (*FileTransferMessage, error) {
	m := new(FileTransferMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Debugd_DownloadFiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadFilesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DebugdServer).DownloadFiles(m, &debugdDownloadFilesServer{stream})
}

type Debugd_DownloadFilesServer interface {
	Send(*FileTransferMessage) error
	grpc.ServerStream
}

type debugdDownloadFilesServer struct {
	grpc.ServerStream
}

func (x *debugdDownloadFilesServer) Send(m *FileTransferMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _Debugd_UploadSystemServiceUnits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadSystemdServiceUnitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugdServer).UploadSystemServiceUnits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debugd.Debugd/UploadSystemServiceUnits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugdServer).UploadSystemServiceUnits(ctx, req.(*UploadSystemdServiceUnitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Debugd_ServiceDesc is the grpc.ServiceDesc for Debugd service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Debugd_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "debugd.Debugd",
	HandlerType: (*DebugdServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetInfo",
			Handler:    _Debugd_SetInfo_Handler,
		},
		{
			MethodName: "GetInfo",
			Handler:    _Debugd_GetInfo_Handler,
		},
		{
			MethodName: "UploadSystemServiceUnits",
			Handler:    _Debugd_UploadSystemServiceUnits_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFiles",
			Handler:       _Debugd_UploadFiles_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadFiles",
			Handler:       _Debugd_DownloadFiles_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "debugd.proto",
}
