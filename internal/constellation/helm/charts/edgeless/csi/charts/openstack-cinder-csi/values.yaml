extraLabels: {}

nameOverride: ""
fullnameOverride: ""
timeout: 3m

csi:
  attacher:
    image:
      repository: registry.k8s.io/sig-storage/csi-attacher
      tag: v4.4.2@sha256:11b955fe4da278aa0e8ca9d6fd70758f2aec4b0c1e23168c665ca345260f1882
      pullPolicy: IfNotPresent
    resources: {}
    extraArgs: {}
  provisioner:
    topology: "true"
    image:
      repository: registry.k8s.io/sig-storage/csi-provisioner
      tag: v3.6.2@sha256:49b94f975603d85a1820b72b1188e5b351d122011b3e5351f98c49d72719aa78
      pullPolicy: IfNotPresent
    resources: {}
    extraArgs: {}
  snapshotter:
    image:
      repository: registry.k8s.io/sig-storage/csi-snapshotter
      tag: v6.3.2@sha256:4c5a1b57e685b2631909b958487f65af7746361346fcd82a8635bea3ef14509d
      pullPolicy: IfNotPresent
    resources: {}
    extraArgs: {}
  resizer:
    image:
      repository: registry.k8s.io/sig-storage/csi-resizer
      tag: v1.9.2@sha256:e998f22243869416f9860fc6a1fb07d4202eac8846defc1b85ebd015c1207605
      pullPolicy: IfNotPresent
    resources: {}
    extraArgs: {}
  livenessprobe:
    image:
      repository: registry.k8s.io/sig-storage/livenessprobe
      tag: v2.11.0@sha256:82adbebdf5d5a1f40f246aef8ddbee7f89dea190652aefe83336008e69f9a89f
      pullPolicy: IfNotPresent
    failureThreshold: 5
    initialDelaySeconds: 10
    timeoutSeconds: 10
    periodSeconds: 60
    resources: {}
    extraArgs: {}
  nodeDriverRegistrar:
    image:
      repository: registry.k8s.io/sig-storage/csi-node-driver-registrar
      tag: v2.9.2@sha256:a18e989a93722e43885120e90bc1d0da0740fcbf44bc10403572b368b9800606
      pullPolicy: IfNotPresent
    resources: {}
    extraArgs: {}
  plugin:
    image:
      repository: ghcr.io/edgelesssys/constellation/cinder-csi-plugin
      pullPolicy: IfNotPresent
      # CSI driver version is independent of Constellation releases
      tag: v1.0.2@sha256:d0b9872378ef5cad9ca5442651df85cf6a4a3a50044018c3541b53f3b7b7480e
    volumeMounts:
      - name: cloud-config
        mountPath: /etc/kubernetes
        readOnly: true
    nodePlugin:
      dnsPolicy: ClusterFirstWithHostNet
      podSecurityContext: {}
      securityContext: {}
        # capabilities:
        #   drop:
        #   - ALL
        # seccompProfile:
        #   type: RuntimeDefault
      affinity: {}
      nodeSelector: {}
      tolerations:
        - operator: Exists
      kubeletDir: /var/lib/kubelet
      # Allow for specifying internal IP addresses for multiple hostnames
      # hostAliases:
      #   - ip: "10.0.0.1"
      #     hostnames:
      #     - "keystone.hostname.com"
    controllerPlugin:
      replicas: 1
      strategy:
        # RollingUpdate strategy replaces old pods with new ones gradually,
        # without incurring downtime.
        type: RollingUpdate
        rollingUpdate:
          # maxUnavailable is the maximum number of pods that can be
          # unavailable during the update process.
          maxUnavailable: 0
          # maxSurge is the maximum number of pods that can be
          # created over the desired number of pods.
          maxSurge: 1
      podSecurityContext: {}
        # runAsNonRoot: true
        # runAsUser: 65532
        # runAsGroup: 65532
        # fsGroup: 65532
        # fsGroupChangePolicy: OnRootMismatch
      securityContext: {}
        # capabilities:
        #   drop:
        #   - ALL
        # seccompProfile:
        #   type: RuntimeDefault
        # readOnlyRootFilesystem: true
      affinity: {}
      nodeSelector: {}
      tolerations: []
      # Allow for specifying internal IP addresses for multiple hostnames
      # hostAliases:
      #   - ip: "10.0.0.1"
      #     hostnames:
      #     - "keystone.hostname.com"
    resources: {}
    # Enable built-in http server through the http-endpoint flag
    httpEndpoint:
      enabled: false
      port: 8080
    # Create Prometheus Operator PodMonitor. Requires http server above.
    # See https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#monitoring.coreos.com/v1.PodMonitor
    podMonitor:
      enabled: false
    extraArgs: {}
  kms:
    keyServiceName: "key-service"
    keyServicePort: 9000
    keyServiceNamespace: "kube-system"

# Log verbosity level.
# See https://github.com/kubernetes/community/blob/master/contributors/devel/sig-instrumentation/logging.md
# for description of individual verbosity levels.
logVerbosityLevel: 2

# the secret should contain the openstack credentials
# there are several options to inject the credentials:
# 1) from kubernetes secret that doesn't exist: set "enabled" and "create" to true, this will create a secret from the values written to "data" down below
# 2) from kubernetes secret that already exists: set "enabled" to true and "create" to false
# 3) from host system path /etc/cloud/cloud.conf: set "enabled" to false and "hostMount" to true
# 4) via agent-injector (e.g. hashicorp vault): set "enabled" and "hostMount" to false, you have to provide credentials on your own by injecting credentials into the pod
secret:
  enabled: true
  create: false
  filename: cloudprovider.conf
  name: cinder-csi-cloud-config

storageClass:
  enabled: true
  default:
    isDefault: true
    allowVolumeExpansion: true
  integrity:
    isDefault: false
    allowVolumeExpansion: false

# You may set ID of the cluster where openstack-cinder-csi is deployed. This value will be appended
# to volume metadata in newly provisioned volumes as `cinder.csi.openstack.org/cluster=<cluster ID>`.
clusterID: "kubernetes"

priorityClassName: ""

imagePullSecrets: []
# - name: my-imagepull-secret

# add annotations to all pods
commonAnnotations: {}
