//go:build enterprise

/*
Copyright (c) Edgeless Systems GmbH

SPDX-License-Identifier: AGPL-3.0-only
*/

package measurements

import "github.com/edgelesssys/constellation/v2/internal/cloud/cloudprovider"

// DefaultsFor provides the default measurements for given cloud provider.
func DefaultsFor(provider cloudprovider.Provider) M {
	switch provider {
	case cloudprovider.AWS:
		return M{
			0: {
				Expected: [32]byte{
					0x73, 0x7f, 0x76, 0x7a, 0x12, 0xf5, 0x4e, 0x70, 0xee, 0xcb, 0xc8, 0x68,
					0x40, 0x11, 0x32, 0x3a, 0xe2, 0xfe, 0x2d, 0xd9, 0xf9, 0x07, 0x85, 0x57,
					0x79, 0x69, 0xd7, 0xa2, 0x01, 0x3e, 0x8c, 0x12,
				},
				WarnOnly: true,
			},
			2: {
				Expected: [32]byte{
					0x3d, 0x45, 0x8c, 0xfe, 0x55, 0xcc, 0x03, 0xea, 0x1f, 0x44, 0x3f, 0x15,
					0x62, 0xbe, 0xec, 0x8d, 0xf5, 0x1c, 0x75, 0xe1, 0x4a, 0x9f, 0xcf, 0x9a,
					0x72, 0x34, 0xa1, 0x3f, 0x19, 0x8e, 0x79, 0x69,
				},
				WarnOnly: true,
			},
			3: {
				Expected: [32]byte{
					0x3d, 0x45, 0x8c, 0xfe, 0x55, 0xcc, 0x03, 0xea, 0x1f, 0x44, 0x3f, 0x15,
					0x62, 0xbe, 0xec, 0x8d, 0xf5, 0x1c, 0x75, 0xe1, 0x4a, 0x9f, 0xcf, 0x9a,
					0x72, 0x34, 0xa1, 0x3f, 0x19, 0x8e, 0x79, 0x69,
				},
				WarnOnly: true,
			},
			4: {
				Expected: [32]byte{
					0xb3, 0x51, 0x44, 0x90, 0xae, 0xd3, 0x1d, 0xf8, 0xf2, 0x19, 0x64, 0x10,
					0x79, 0x53, 0x33, 0xe3, 0x94, 0xfa, 0x22, 0x5a, 0x7a, 0xe6, 0xdb, 0xe3,
					0x8c, 0x53, 0xd6, 0xfd, 0x5a, 0xe3, 0x60, 0x54,
				},
				WarnOnly: false,
			},
			5: {
				Expected: [32]byte{
					0x1f, 0xf1, 0xac, 0xad, 0x3e, 0x81, 0xb9, 0xac, 0xb3, 0x13, 0x4d, 0xed,
					0xe0, 0x2f, 0x72, 0xdb, 0x42, 0x6f, 0x0a, 0x04, 0xe6, 0x29, 0x54, 0x6d,
					0x63, 0x70, 0xd5, 0x7b, 0xa1, 0x9c, 0xab, 0x60,
				},
				WarnOnly: true,
			},
			6: {
				Expected: [32]byte{
					0x3d, 0x45, 0x8c, 0xfe, 0x55, 0xcc, 0x03, 0xea, 0x1f, 0x44, 0x3f, 0x15,
					0x62, 0xbe, 0xec, 0x8d, 0xf5, 0x1c, 0x75, 0xe1, 0x4a, 0x9f, 0xcf, 0x9a,
					0x72, 0x34, 0xa1, 0x3f, 0x19, 0x8e, 0x79, 0x69,
				},
				WarnOnly: true,
			},
			7: {
				Expected: [32]byte{
					0x12, 0x0e, 0x49, 0x8d, 0xb2, 0xa2, 0x24, 0xbd, 0x51, 0x2b, 0x6e, 0xfc,
					0x9b, 0x02, 0x34, 0xf8, 0x43, 0xe1, 0x0b, 0xf0, 0x61, 0xeb, 0x7a, 0x76,
					0xec, 0xca, 0x55, 0x09, 0xa2, 0x23, 0x89, 0x01,
				},
				WarnOnly: true,
			},
			8: WithAllBytes(0x00, false),
			9: {
				Expected: [32]byte{
					0x22, 0xe0, 0xe4, 0x1f, 0x7a, 0xea, 0xf7, 0x6a, 0x4d, 0x4f, 0xa5, 0x3b,
					0x22, 0xb4, 0x1b, 0xf0, 0x0f, 0x78, 0xda, 0xf6, 0x90, 0xc1, 0x90, 0x2a,
					0xa1, 0x71, 0xcf, 0x5c, 0x30, 0x33, 0x72, 0x8b,
				},
				WarnOnly: false,
			},
			11: WithAllBytes(0x00, false),
			12: {
				Expected: [32]byte{
					0x32, 0x76, 0xad, 0x0c, 0xec, 0xf5, 0xfd, 0xba, 0x77, 0xf6, 0xd6, 0x25,
					0x3c, 0xaf, 0x9f, 0xd0, 0x90, 0x03, 0xbe, 0x88, 0xd3, 0x96, 0xfd, 0xf5,
					0xf2, 0xce, 0x0c, 0x8c, 0xa9, 0xac, 0x67, 0xe3,
				},
				WarnOnly: false,
			},
			13: WithAllBytes(0x00, false),
			14: {
				Expected: [32]byte{
					0xd7, 0xc4, 0xcc, 0x7f, 0xf7, 0x93, 0x30, 0x22, 0xf0, 0x13, 0xe0, 0x3b,
					0xde, 0xe8, 0x75, 0xb9, 0x17, 0x20, 0xb5, 0xb8, 0x6c, 0xf1, 0x75, 0x3c,
					0xad, 0x83, 0x0f, 0x95, 0xe7, 0x91, 0x92, 0x6f,
				},
				WarnOnly: true,
			},
			uint32(PCRIndexClusterID): WithAllBytes(0x00, false),
		}
	case cloudprovider.Azure:
		return M{
			1: {
				Expected: [32]byte{
					0x3d, 0x45, 0x8c, 0xfe, 0x55, 0xcc, 0x03, 0xea, 0x1f, 0x44, 0x3f, 0x15,
					0x62, 0xbe, 0xec, 0x8d, 0xf5, 0x1c, 0x75, 0xe1, 0x4a, 0x9f, 0xcf, 0x9a,
					0x72, 0x34, 0xa1, 0x3f, 0x19, 0x8e, 0x79, 0x69,
				},
				WarnOnly: true,
			},
			2: {
				Expected: [32]byte{
					0x3d, 0x45, 0x8c, 0xfe, 0x55, 0xcc, 0x03, 0xea, 0x1f, 0x44, 0x3f, 0x15,
					0x62, 0xbe, 0xec, 0x8d, 0xf5, 0x1c, 0x75, 0xe1, 0x4a, 0x9f, 0xcf, 0x9a,
					0x72, 0x34, 0xa1, 0x3f, 0x19, 0x8e, 0x79, 0x69,
				},
				WarnOnly: true,
			},
			3: {
				Expected: [32]byte{
					0x3d, 0x45, 0x8c, 0xfe, 0x55, 0xcc, 0x03, 0xea, 0x1f, 0x44, 0x3f, 0x15,
					0x62, 0xbe, 0xec, 0x8d, 0xf5, 0x1c, 0x75, 0xe1, 0x4a, 0x9f, 0xcf, 0x9a,
					0x72, 0x34, 0xa1, 0x3f, 0x19, 0x8e, 0x79, 0x69,
				},
				WarnOnly: true,
			},
			4: {
				Expected: [32]byte{
					0xb6, 0xcb, 0xb2, 0x18, 0xdc, 0x45, 0xc3, 0x45, 0x46, 0xb1, 0xd9, 0x90,
					0x7d, 0x9b, 0x35, 0xbf, 0x9f, 0x4e, 0x36, 0x35, 0xe1, 0xb9, 0x80, 0xdc,
					0x21, 0x9f, 0x60, 0x7e, 0xa1, 0x37, 0xcd, 0x6b,
				},
				WarnOnly: false,
			},
			5: {
				Expected: [32]byte{
					0x64, 0x21, 0x98, 0xf5, 0x87, 0x5c, 0xb7, 0x35, 0x0c, 0xb5, 0x99, 0x56,
					0xa6, 0x1b, 0xde, 0x1b, 0x95, 0xff, 0x15, 0xbe, 0x5e, 0x92, 0x7f, 0x44,
					0xc1, 0xef, 0xfa, 0xfe, 0x3e, 0x88, 0x9a, 0x94,
				},
				WarnOnly: true,
			},
			7: {
				Expected: [32]byte{
					0x34, 0x65, 0x47, 0xa8, 0xce, 0x59, 0x57, 0xaf, 0x27, 0xe5, 0x52, 0x42,
					0x7d, 0x6b, 0x9e, 0x6d, 0x9c, 0xb5, 0x02, 0xf0, 0x15, 0x6e, 0x91, 0x55,
					0x38, 0x04, 0x51, 0xee, 0xa1, 0xb3, 0xf0, 0xed,
				},
				WarnOnly: true,
			},
			8: WithAllBytes(0x00, false),
			9: {
				Expected: [32]byte{
					0x22, 0xe0, 0xe4, 0x1f, 0x7a, 0xea, 0xf7, 0x6a, 0x4d, 0x4f, 0xa5, 0x3b,
					0x22, 0xb4, 0x1b, 0xf0, 0x0f, 0x78, 0xda, 0xf6, 0x90, 0xc1, 0x90, 0x2a,
					0xa1, 0x71, 0xcf, 0x5c, 0x30, 0x33, 0x72, 0x8b,
				},
				WarnOnly: false,
			},
			11: WithAllBytes(0x00, false),
			12: {
				Expected: [32]byte{
					0x6f, 0xcb, 0x53, 0xd9, 0x95, 0xff, 0xd6, 0x0b, 0xc1, 0x10, 0x23, 0xc9,
					0x1a, 0x0c, 0xe5, 0x23, 0x46, 0xc0, 0x03, 0xea, 0x28, 0x07, 0xae, 0x2d,
					0x8f, 0x82, 0xec, 0x3f, 0xd9, 0x4b, 0xb2, 0xb5,
				},
				WarnOnly: false,
			},
			13: WithAllBytes(0x00, false),
			14: {
				Expected: [32]byte{
					0xd7, 0xc4, 0xcc, 0x7f, 0xf7, 0x93, 0x30, 0x22, 0xf0, 0x13, 0xe0, 0x3b,
					0xde, 0xe8, 0x75, 0xb9, 0x17, 0x20, 0xb5, 0xb8, 0x6c, 0xf1, 0x75, 0x3c,
					0xad, 0x83, 0x0f, 0x95, 0xe7, 0x91, 0x92, 0x6f,
				},
				WarnOnly: true,
			},
			uint32(PCRIndexClusterID): WithAllBytes(0x00, false),
		}
	case cloudprovider.GCP:
		return M{
			0: {
				Expected: [32]byte{
					0x0f, 0x35, 0xc2, 0x14, 0x60, 0x8d, 0x93, 0xc7, 0xa6, 0xe6, 0x8a, 0xe7,
					0x35, 0x9b, 0x4a, 0x8b, 0xe5, 0xa0, 0xe9, 0x9e, 0xea, 0x91, 0x07, 0xec,
					0xe4, 0x27, 0xc4, 0xde, 0xa4, 0xe4, 0x39, 0xcf,
				},
				WarnOnly: false,
			},
			1: {
				Expected: [32]byte{
					0x74, 0x5f, 0x2f, 0xb4, 0x23, 0x5e, 0x46, 0x47, 0xaa, 0x0a, 0xd5, 0xac,
					0xe7, 0x81, 0xcd, 0x92, 0x9e, 0xb6, 0x8c, 0x28, 0x87, 0x0e, 0x7d, 0xd5,
					0xd1, 0xa1, 0x53, 0x58, 0x54, 0x32, 0x5e, 0x56,
				},
				WarnOnly: true,
			},
			2: {
				Expected: [32]byte{
					0x3d, 0x45, 0x8c, 0xfe, 0x55, 0xcc, 0x03, 0xea, 0x1f, 0x44, 0x3f, 0x15,
					0x62, 0xbe, 0xec, 0x8d, 0xf5, 0x1c, 0x75, 0xe1, 0x4a, 0x9f, 0xcf, 0x9a,
					0x72, 0x34, 0xa1, 0x3f, 0x19, 0x8e, 0x79, 0x69,
				},
				WarnOnly: true,
			},
			3: {
				Expected: [32]byte{
					0x3d, 0x45, 0x8c, 0xfe, 0x55, 0xcc, 0x03, 0xea, 0x1f, 0x44, 0x3f, 0x15,
					0x62, 0xbe, 0xec, 0x8d, 0xf5, 0x1c, 0x75, 0xe1, 0x4a, 0x9f, 0xcf, 0x9a,
					0x72, 0x34, 0xa1, 0x3f, 0x19, 0x8e, 0x79, 0x69,
				},
				WarnOnly: true,
			},
			4: {
				Expected: [32]byte{
					0x5c, 0x08, 0x21, 0x69, 0x2b, 0x19, 0x0d, 0x92, 0xd0, 0xfa, 0xbb, 0xe6,
					0xe4, 0xde, 0x8f, 0xbb, 0x4f, 0xae, 0xdf, 0xd0, 0x57, 0xf9, 0xbb, 0xd3,
					0x0b, 0x4f, 0x34, 0xaf, 0xe1, 0x0d, 0xed, 0x85,
				},
				WarnOnly: false,
			},
			5: {
				Expected: [32]byte{
					0x9d, 0x5f, 0x8c, 0x2e, 0x04, 0x64, 0xc6, 0x95, 0x52, 0xe5, 0x93, 0xbe,
					0x32, 0xa4, 0xb0, 0x89, 0xf7, 0xe7, 0x7f, 0x4e, 0xd1, 0x2d, 0x60, 0xcd,
					0xcd, 0x94, 0x12, 0x0b, 0x6c, 0xca, 0xcc, 0xf8,
				},
				WarnOnly: true,
			},
			6: {
				Expected: [32]byte{
					0x3d, 0x45, 0x8c, 0xfe, 0x55, 0xcc, 0x03, 0xea, 0x1f, 0x44, 0x3f, 0x15,
					0x62, 0xbe, 0xec, 0x8d, 0xf5, 0x1c, 0x75, 0xe1, 0x4a, 0x9f, 0xcf, 0x9a,
					0x72, 0x34, 0xa1, 0x3f, 0x19, 0x8e, 0x79, 0x69,
				},
				WarnOnly: true,
			},
			7: {
				Expected: [32]byte{
					0xb1, 0xe9, 0xb3, 0x05, 0x32, 0x5c, 0x51, 0xb9, 0x3d, 0xa5, 0x8c, 0xbf,
					0x7f, 0x92, 0x51, 0x2d, 0x8e, 0xeb, 0xfa, 0x01, 0x14, 0x3e, 0x4d, 0x88,
					0x44, 0xe4, 0x0e, 0x06, 0x2e, 0x9b, 0x6c, 0xd5,
				},
				WarnOnly: true,
			},
			8: WithAllBytes(0x00, false),
			9: {
				Expected: [32]byte{
					0x5f, 0xa5, 0xd5, 0x21, 0xd8, 0xfc, 0xe9, 0xd1, 0xbb, 0xb0, 0x63, 0x67,
					0x4b, 0x3b, 0x5b, 0x63, 0xbd, 0x5d, 0xee, 0x6f, 0x0f, 0xda, 0xb6, 0x76,
					0x7e, 0x00, 0x8c, 0xd3, 0xbf, 0xfe, 0x7f, 0xf6,
				},
				WarnOnly: false,
			},
			10: {
				Expected: [32]byte{
					0x7f, 0x96, 0xfb, 0xc5, 0x5e, 0x1d, 0x2a, 0x0d, 0xe4, 0x6e, 0x5d, 0x44,
					0x65, 0x8c, 0x06, 0xef, 0x10, 0x2d, 0x11, 0x98, 0x70, 0x3e, 0xfa, 0x69,
					0xf2, 0xea, 0x6b, 0x5a, 0xa1, 0xc9, 0xa1, 0x76,
				},
				WarnOnly: true,
			},
			11: WithAllBytes(0x00, false),
			12: {
				Expected: [32]byte{
					0xb8, 0x24, 0x89, 0x10, 0xeb, 0xe1, 0x19, 0x1c, 0x29, 0x46, 0x37, 0x37,
					0x57, 0xf8, 0xe4, 0xd6, 0x5d, 0x88, 0x34, 0xa7, 0x2b, 0xc8, 0x35, 0x69,
					0xc2, 0x90, 0x52, 0xa7, 0xe7, 0x84, 0x15, 0xe4,
				},
				WarnOnly: false,
			},
			13: WithAllBytes(0x00, false),
			14: {
				Expected: [32]byte{
					0xd7, 0xc4, 0xcc, 0x7f, 0xf7, 0x93, 0x30, 0x22, 0xf0, 0x13, 0xe0, 0x3b,
					0xde, 0xe8, 0x75, 0xb9, 0x17, 0x20, 0xb5, 0xb8, 0x6c, 0xf1, 0x75, 0x3c,
					0xad, 0x83, 0x0f, 0x95, 0xe7, 0x91, 0x92, 0x6f,
				},
				WarnOnly: true,
			},
			uint32(PCRIndexClusterID): WithAllBytes(0x00, false),
		}
	case cloudprovider.QEMU:
		return M{
			0: {
				Expected: [32]byte{
					0x7d, 0x08, 0x99, 0x70, 0x28, 0xf3, 0x4f, 0x6c, 0xcd, 0xd2, 0xed, 0x9b,
					0xd3, 0x18, 0x04, 0xcf, 0x0b, 0x0c, 0x7f, 0xff, 0x9a, 0x4d, 0x05, 0x29,
					0x9e, 0x33, 0x62, 0x00, 0x01, 0x51, 0x02, 0x81,
				},
				WarnOnly: true,
			},
			1: {
				Expected: [32]byte{
					0xee, 0x07, 0x10, 0x2d, 0x14, 0x18, 0x51, 0x80, 0x24, 0x11, 0x08, 0x72,
					0xa7, 0x13, 0xa9, 0x82, 0x4b, 0xc7, 0xf6, 0xae, 0x47, 0xd6, 0x2f, 0xd0,
					0xcd, 0xe0, 0x91, 0x8c, 0x0e, 0x24, 0x9b, 0x7e,
				},
				WarnOnly: true,
			},
			2: {
				Expected: [32]byte{
					0x72, 0x00, 0x1a, 0x25, 0x20, 0x1b, 0x26, 0x3b, 0xc6, 0x0f, 0x86, 0x9a,
					0xce, 0x2f, 0x72, 0x8b, 0x09, 0xdc, 0x4b, 0xe7, 0x8b, 0x9c, 0x80, 0xad,
					0xca, 0x87, 0xa0, 0x13, 0xc2, 0xd2, 0x69, 0x50,
				},
				WarnOnly: true,
			},
			3: {
				Expected: [32]byte{
					0x3d, 0x45, 0x8c, 0xfe, 0x55, 0xcc, 0x03, 0xea, 0x1f, 0x44, 0x3f, 0x15,
					0x62, 0xbe, 0xec, 0x8d, 0xf5, 0x1c, 0x75, 0xe1, 0x4a, 0x9f, 0xcf, 0x9a,
					0x72, 0x34, 0xa1, 0x3f, 0x19, 0x8e, 0x79, 0x69,
				},
				WarnOnly: true,
			},
			4: {
				Expected: [32]byte{
					0x83, 0x5a, 0xe5, 0x47, 0xbf, 0x27, 0x52, 0x5d, 0x17, 0x3e, 0xdb, 0xec,
					0xe7, 0x1e, 0x31, 0xed, 0xea, 0xde, 0x0b, 0xf8, 0x9d, 0x18, 0xf4, 0x46,
					0xd0, 0x97, 0xd7, 0xfc, 0xa0, 0x3e, 0x13, 0xe0,
				},
				WarnOnly: false,
			},
			5: {
				Expected: [32]byte{
					0xc9, 0x39, 0x8a, 0xd4, 0x14, 0x99, 0x7a, 0x41, 0x35, 0xb1, 0x08, 0xdf,
					0xf7, 0xc1, 0x8c, 0x15, 0x33, 0xd7, 0x03, 0x95, 0x04, 0x5e, 0x93, 0x94,
					0xf8, 0xce, 0xe6, 0x97, 0x44, 0xf7, 0x84, 0xbd,
				},
				WarnOnly: true,
			},
			6: {
				Expected: [32]byte{
					0x3d, 0x45, 0x8c, 0xfe, 0x55, 0xcc, 0x03, 0xea, 0x1f, 0x44, 0x3f, 0x15,
					0x62, 0xbe, 0xec, 0x8d, 0xf5, 0x1c, 0x75, 0xe1, 0x4a, 0x9f, 0xcf, 0x9a,
					0x72, 0x34, 0xa1, 0x3f, 0x19, 0x8e, 0x79, 0x69,
				},
				WarnOnly: true,
			},
			7: {
				Expected: [32]byte{
					0xdb, 0xc0, 0xbf, 0x1f, 0xfb, 0xa0, 0x30, 0x7a, 0xa4, 0xef, 0xec, 0xb3,
					0x76, 0x6d, 0x8a, 0x36, 0x55, 0x95, 0xbc, 0x38, 0x4a, 0x3d, 0xcb, 0x87,
					0xd7, 0xef, 0x9b, 0x5d, 0xcf, 0x44, 0x16, 0x5b,
				},
				WarnOnly: true,
			},
			8: WithAllBytes(0x00, false),
			9: {
				Expected: [32]byte{
					0x22, 0xe0, 0xe4, 0x1f, 0x7a, 0xea, 0xf7, 0x6a, 0x4d, 0x4f, 0xa5, 0x3b,
					0x22, 0xb4, 0x1b, 0xf0, 0x0f, 0x78, 0xda, 0xf6, 0x90, 0xc1, 0x90, 0x2a,
					0xa1, 0x71, 0xcf, 0x5c, 0x30, 0x33, 0x72, 0x8b,
				},
				WarnOnly: false,
			},
			10: {
				Expected: [32]byte{
					0x70, 0x54, 0x86, 0xf7, 0xf5, 0x2b, 0x61, 0xfe, 0xb5, 0xd2, 0x48, 0x30,
					0xad, 0x12, 0xaf, 0xbe, 0xfb, 0xb2, 0x45, 0xc3, 0xf0, 0xcb, 0x76, 0x74,
					0x98, 0xbe, 0x50, 0x3c, 0x79, 0xf2, 0x46, 0x66,
				},
				WarnOnly: true,
			},
			11: WithAllBytes(0x00, false),
			12: {
				Expected: [32]byte{
					0x13, 0xb1, 0x4a, 0xca, 0xf8, 0x67, 0x50, 0xe3, 0x0d, 0x24, 0x42, 0xcd,
					0xbb, 0xcb, 0x0a, 0x9f, 0x3b, 0x62, 0xfc, 0xc8, 0x8c, 0x05, 0x12, 0xe2,
					0x67, 0x10, 0xba, 0xbd, 0x52, 0xc3, 0x52, 0x84,
				},
				WarnOnly: false,
			},
			13: WithAllBytes(0x00, false),
			14: {
				Expected: [32]byte{
					0xfb, 0xfe, 0x27, 0x0f, 0xee, 0x9d, 0x94, 0xd4, 0x15, 0x84, 0xab, 0xca,
					0x17, 0x94, 0xfb, 0x4a, 0x42, 0xcf, 0xcf, 0x9a, 0xb4, 0xbe, 0xab, 0xa4,
					0x91, 0x29, 0xda, 0xe2, 0x29, 0x51, 0xce, 0xf5,
				},
				WarnOnly: true,
			},
			uint32(PCRIndexClusterID): WithAllBytes(0x00, false),
		}
	default:
		return nil
	}
}
