name: e2e test weekly

on:
  workflow_call:
    inputs:
      ref:
        type: string
        description: "Git ref to checkout"
        default: "head"
        required: false # If not provided (e.g. on cronjob run), main HEAD will be used.
      keepMeasurements:
        description: "Keep measurements embedded in the CLI."
        type: boolean
        default: false
        required: false
      osImage:
        description: "Full name of OS image (CSP independent image version UID). Leave empty for latest debug image on main."
        type: string
        default: ""
        required: false
      runner:
        description: "Architecture of the runner that executes the CLI"
        type: string
        default: "ubuntu-22.04"
        required: false
  workflow_dispatch:
    inputs:
      ref:
        type: string
        description: "Git ref to checkout"
        default: "head"
        required: false # If not provided (e.g. on cronjob run), main HEAD will be used.
      keepMeasurements:
        description: "Keep measurements embedded in the CLI."
        type: boolean
        default: false
        required: false
      osImage:
        description: "Full name of OS image (CSP independent image version UID). Leave empty for latest debug image on main."
        type: string
        default: ""
        required: false
      runner:
        description: "Architecture of the runner that executes the CLI"
        type: string
        default: "ubuntu-22.04"
        required: false

  schedule:
    - cron: "0 3 * * 6" # At 03:00 on Saturday.

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_E2E_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_E2E_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_E2E_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_E2E_TENANT_ID }}

jobs:
  find-latest-image:
    name: Select image
    runs-on: ubuntu-22.04
    permissions:
      id-token: write
      contents: read
    outputs:
      image: ${{ steps.find-latest-image.outputs.output }}${{ steps.check-input.outputs.image }}
      isDebugImage: ${{ steps.isDebugImage.outputs.isDebugImage }}
    steps:
      - name: Check input
        id: check-input
        shell: bash
        run: |
          if [[ -z "${{ inputs.osImage }}" ]]; then
            echo "Using latest debug image from main."
          else
            echo "Using image '${{ inputs.osImage }}'."
            echo "image=${{ inputs.osImage }}" >> "$GITHUB_OUTPUT"
            exit 0
          fi

      - name: Checkout head
        if: inputs.ref == 'head'
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
        with:
          ref: ${{ !github.event.pull_request.head.repo.fork && github.head_ref || '' }}

      - name: Checkout ref
        if: inputs.ref != 'head'
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
        with:
          ref: ${{ inputs.ref }}

      - name: Login to AWS
        uses: aws-actions/configure-aws-credentials@67fbcbb121271f7775d2e7715933280b06314838 # v1.7.0
        with:
          role-to-assume: arn:aws:iam::795746500882:role/GithubConstellationVersionsAPIRead
          aws-region: eu-central-1

      - name: Find latest image
        id: find-latest-image
        if: steps.check-input.outputs.image == ''
        uses: ./.github/actions/versionsapi
        with:
          command: latest
          ref: main
          stream: debug

      - name: Is debug image?
        id: isDebugImage
        shell: bash
        run: |
          case "${{ inputs.osImage }}" in
            "")
              echo "isDebugImage=true" >> "$GITHUB_OUTPUT"
              echo "Image is debug image."
              ;;
            *"/stream/debug/"*)
              echo "isDebugImage=true" >> "$GITHUB_OUTPUT"
              echo "Image is debug image."
              ;;
            *)
              echo "isDebugImage=false" >> "$GITHUB_OUTPUT"
              echo "Image is not debug image."
              ;;
          esac

  build-bootstrapper:
    name: "Build bootstrapper for macOS runner"
    runs-on: ubuntu-22.04
    if: inputs.runner == 'macos-12' && needs.find-latest-image.outputs.isDebugImage == 'true'
    needs: [find-latest-image]
    steps:
      - name: Setup Go environment
        uses: actions/setup-go@6edd4406fa81c3da01a34fa6f6343087c207a568 # v3.5.0
        with:
          go-version: "1.19.5"

      - name: Checkout head
        if: inputs.ref == 'head'
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
        with:
          ref: ${{ !github.event.pull_request.head.repo.fork && github.head_ref || '' }}

      - name: Checkout ref
        if: inputs.ref != 'head'
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
        with:
          ref: ${{ inputs.ref }}

      - name: Build bootstrapper
        uses: ./.github/actions/build_bootstrapper

      - name: Build upgrade-agent
        uses: ./.github/actions/build_upgrade_agent
        with:
          outputPath: ${{ github.workspace }}/build/upgrade-agent

      - name: Upload bootstrapper to cache
        uses: actions/cache@627f0f41f6904a5b1efbaed9f96d9eb58e92e920 # v3.2.4
        with:
          key: bootstrapper-${{ github.sha }}
          path: "build/bootstrapper"

      - name: Upload upgrade-agent to cache
        uses: actions/cache@627f0f41f6904a5b1efbaed9f96d9eb58e92e920 # v3.2.4
        with:
          key: upgrade-agent-${{ github.sha }}
          path: "build/upgrade-agent"

  e2e-weekly:
    strategy:
      fail-fast: false
      max-parallel: 5
      matrix:
        test:
          [
            "sonobuoy full",
            "autoscaling",
            "perf-bench",
            "lb",
            "verify",
            "recover",
            "iamcreate",
          ]
        provider: ["gcp", "azure", "aws"]
        version: ["v1.24", "v1.25", "v1.26"]
        exclude:
          # IAM create test runs only on latest version.
          - test: "iamcreate"
            version: "v1.24"
          - test: "iamcreate"
            version: "v1.25"
          # Verify test runs only on latest version.
          - test: "verify"
            version: "v1.24"
          - test: "verify"
            version: "v1.25"
          # Recover test runs only on latest version.
          - test: "recover"
            version: "v1.24"
          - test: "recover"
            version: "v1.25"
          # Autoscaling test runs only on latest version.
          - test: "autoscaling"
            version: "v1.24"
          - test: "autoscaling"
            version: "v1.25"
          # Perf-Bench test runs only on latest version.
          - test: "perf-bench"
            version: "v1.24"
          - test: "perf-bench"
            version: "v1.25"
          # lb test runs only on latest version.
          - test: "lb"
            version: "v1.24"
          - test: "lb"
            version: "v1.25"
          # Currently not supported on AWS.
          - test: "autoscaling"
            provider: "aws"
          - test: "perf-bench"
            provider: "aws"
    runs-on: ${{ inputs.runner }}
    permissions:
      id-token: write
      contents: read
    needs: [find-latest-image, build-bootstrapper]
    if: |
      always() &&
      !cancelled() &&
      (
        needs.build-bootstrapper.result == 'success' ||
        needs.build-bootstrapper.result == 'skipped'
      )
    steps:
      - name: Install the basics tools (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: brew install coreutils kubectl bash

      - name: Check out repository
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
        with:
          fetch-depth: 0
          ref: ${{ !github.event.pull_request.head.repo.fork && github.head_ref || '' }}

      - name: Setup Go environment
        uses: actions/setup-go@6edd4406fa81c3da01a34fa6f6343087c207a568 # v3.5.0
        with:
          go-version: "1.20.2"

      - name: Set up gcloud CLI (macOS)
        if: matrix.provider == 'gcp' && runner.os == 'macOS'
        uses: google-github-actions/setup-gcloud@d51b5346f85640ec2aa2fa057354d2b82c2fcbce # v1.0.1

      - name: Login to Azure
        if: matrix.provider == 'azure'
        uses: ./.github/actions/login_azure
        with:
          azure_credentials: ${{ secrets.AZURE_E2E_CREDENTIALS }}

      - name: Create Azure resource group
        id: az_resource_group_gen
        if: matrix.provider == 'azure'
        shell: bash
        run: |
          uuid=$(cat /proc/sys/kernel/random/uuid)
          name=e2e-test-${uuid%%-*}
          az group create --location northeurope --name "$name" --tags e2e
          echo "res_group_name=$name" >> "$GITHUB_OUTPUT"

      - name: Run E2E test
        id: e2e_test
        uses: ./.github/actions/e2e_test
        with:
          workerNodesCount: "2"
          controlNodesCount: "3"
          cloudProvider: ${{ matrix.provider }}
          keepMeasurements: ${{ inputs.keepMeasurements }}
          osImage: ${{ inputs.osImage || needs.find-latest-image.outputs.image }}
          kubernetesVersion: ${{ matrix.version }}
          awsOpenSearchDomain: ${{ secrets.AWS_OPENSEARCH_DOMAIN }}
          awsOpenSearchUsers: ${{ secrets.AWS_OPENSEARCH_USER }}
          awsOpenSearchPwd: ${{ secrets.AWS_OPENSEARCH_PWD }}
          azureSubscription: ${{ secrets.AZURE_E2E_SUBSCRIPTION_ID }}
          azureTenant: ${{ secrets.AZURE_E2E_TENANT_ID }}
          azureClientID: ${{ secrets.AZURE_E2E_CLIENT_ID }}
          azureClientSecret: ${{ secrets.AZURE_E2E_CLIENT_SECRET }}
          azureUserAssignedIdentity: ${{ secrets.AZURE_E2E_USER_ASSIGNED_IDENTITY }}
          azureResourceGroup: ${{ steps.az_resource_group_gen.outputs.res_group_name }}
          gcpProject: ${{ secrets.GCP_E2E_PROJECT }}
          gcp_service_account: "constellation-e2e@constellation-331613.iam.gserviceaccount.com"
          gcpClusterServiceAccountKey: ${{ secrets.GCP_CLUSTER_SERVICE_ACCOUNT }}
          test: ${{ matrix.test }}

      - name: Always terminate cluster
        if: always()
        continue-on-error: true
        uses: ./.github/actions/constellation_destroy
        with:
          kubeconfig: ${{ steps.e2e_test.outputs.kubeconfig }}

      - name: Always delete IAM configuration
        if: always() && matrix.test == 'iamcreate' && matrix.provider != 'azure' # skip for Azure, as the SP / MI does not have the required permissions
        continue-on-error: true
        uses: ./.github/actions/constellation_iam_destroy

      - name: Notify teams channel
        if: failure() && github.ref == 'refs/heads/main'
        continue-on-error: true
        shell: bash
        working-directory: .github/actions/e2e_test
        run: |
          sudo apt-get install gettext-base -y
          export TEAMS_JOB_NAME=${{ matrix.provider }}
          export TEAMS_RUN_ID=${{ github.run_id }}
          envsubst < teams-payload.json > to-be-send.json
          curl                                          \
            -H "Content-Type: application/json"         \
            -d @to-be-send.json                         \
            "${{ secrets.MS_TEAMS_WEBHOOK_URI }}"

      - name: Always destroy Azure resource group
        if: always() && matrix.provider == 'azure'
        shell: bash
        run: |
          az group delete \
            --name ${{ steps.az_resource_group_gen.outputs.res_group_name }} \
            --force-deletion-types Microsoft.Compute/virtualMachineScaleSets \
            --force-deletion-types Microsoft.Compute/virtualMachines \
            --no-wait \
            --yes
