name: Emergency ssh
description: "Verify that an emergency ssh connection can be established."

inputs:
  kubeconfig:
    description: "The kubeconfig file for the cluster."
    required: true

runs:
  using: "composite"
  steps:
    - name: Test emergency ssh
      shell: bash
      env:
        KUBECONFIG: ${{ inputs.kubeconfig }}
      run: |
        set -euo pipefail

        # Activate emergency ssh access to the cluster
        pushd ./constellation-terraform
        echo "emergency_ssh = true" >> terraform.tfvars
        terraform apply -auto-approve
        lb="$(terraform output -raw loadbalancer_address)"
        popd

        # write ssh config
        cat > ssh_config <<EOF
        Host $lb
          ProxyJump none

        Host *
          StrictHostKeyChecking no
          UserKnownHostsFile=/dev/null
          IdentityFile ./access-key
          PreferredAuthentications publickey
          CertificateFile=constellation_cert.pub
          User root
          ProxyJump $lb
        EOF

        for i in {1..51}; do
          if [[ "$i" -eq 51 ]]; then
            echo "Port 22 never became reachable"
            exit 1
          fi
          printf "Waiting until port 22 is reachable: %d/50\n" "$i"
          if nc -z -w 25 "$lb" 22; then
            break
          fi
        done

        # generate and try keypair
        ssh-keygen -t ecdsa -q -N "" -f ./access-key
        constellation ssh --debug --key ./access-key.pub
        internalIPs="$(kubectl get nodes -o=jsonpath='{.items[*].status.addresses}' | jq -r '.[] | select(.type == "InternalIP") | .address')"
        for ip in $internalIPs; do
          echo "Trying connection to $ip over $lb"
          ssh -F ssh_config -o BatchMode=yes $ip true
        done
